{"version":3,"sources":["Components/SideBar.js","helpers.js","Components/RestaurantCard.js","Components/RestaurantList.js","App.js","serviceWorker.js","index.js"],"names":["SideBar","items","numItems","selectedCategory","className","map","item","key","toLowerCase","href","replace","images","RestaurantCard","restaurant","useState","food_types","reduce","acc","curr","foodType","src","Math","floor","random","length","alt","name","ratings","delivery_time","price_for_two","RestaurantList","title","restaurants","disableMore","scrollPosn","changeSelectedCategory","myRef","useRef","useEffect","fromTop","current","getBoundingClientRect","top","fromBottom","bottom","numLoaded","changeNumLoaded","ref","slice","onClick","App","changeRestaurants","allRestaurants","changeAllRestaurants","exclusiveRestaurants","changeExclusiveRestaurants","changeScrollPosn","window","onscroll","pageYOffset","innerHeight","a","axios","get","response","data","getData","allRestaurantsTemp","accumulator","currentValue","restaurantList","concat","filter","isExlusive","restaurantsCategory","category","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c954fbd.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SideBar({items, numItems, selectedCategory}) {\n  return (\n    <div className=\"sidebar\">\n      <div className='sidebar-container'>\n        {items.map((item, key)=> (\n          <a\n            className={`sidebar-item ${item.toLowerCase() === selectedCategory.toLowerCase() ? 'sidebar-selected' : ''}`}\n            href={`#${item.replace(/ /g,'').toLowerCase()}`}\n          >\n            <div>\n              <div className=\"sidebar-title\">\n                {item}\n              </div>\n              <div className='sidebar-subtitle'>\n                {numItems[key]} Options\n              </div>\n            </div>\n          </a>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SideBar;\n","const images = [\n  \"https://images.unsplash.com/photo-1484723091739-30a097e8f929?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1521305916504-4a1121188589?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1511690743698-d9d85f2fbf38?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1506084868230-bb9d95c24759?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1429554513019-6c61c19ffb7e?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1482049016688-2d3e1b311543?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1496412705862-e0088f16f791?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1432139509613-5c4255815697?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1478145046317-39f10e56b5e9?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1484980972926-edee96e0960d?auto=format&fit=crop&w=500&q=60\",\n  \"https://images.unsplash.com/photo-1504544750208-dc0358e63f7f?auto=format&fit=crop&w=500&q=60\"\n];\n\nexport function getRandomImage() {\n  return images[Math.floor(Math.random() * images.length)]\n}\n","import React, {useState} from \"react\";\nimport {getRandomImage} from \"../helpers\";\n\nfunction RestaurantCard({restaurant}) {\n  const [foodType] = useState(restaurant.food_types.reduce((acc, curr) => acc + ', ' + curr))\n  return (\n    <div className='restaurant-card'>\n      <img src={getRandomImage()} alt=\"\"/>\n      <div className='title'>\n        {restaurant.name}\n      </div>\n      <div className=\"subtitle1\">{foodType}</div>\n      <div className=\"details\">\n        <span className='rating'>\n          &#9733; {restaurant.ratings}\n        </span>\n        .\n        <span className='subtitle2'>{restaurant.delivery_time}</span>\n        .\n        <span className='subtitle2'>â‚¹{restaurant.price_for_two} for two</span>\n      </div>\n    </div>\n  )\n}\n\nexport default RestaurantCard;\n","import React, {useEffect, useRef, useState} from \"react\";\nimport RestaurantCard from \"./RestaurantCard\";\n\nfunction RestaurantList({title, restaurants, disableMore, scrollPosn, changeSelectedCategory}) {\n  const myRef = useRef(null);\n  useEffect(()=>{\n    const fromTop = myRef.current.getBoundingClientRect().top;\n    const fromBottom = myRef.current.getBoundingClientRect().bottom;\n    if (fromTop < 50 && fromBottom > 0) {\n      changeSelectedCategory(title);\n    }\n  }, [title, changeSelectedCategory, scrollPosn] );\n  const [numLoaded, changeNumLoaded] = useState(0);\n  useEffect(() => {\n    changeNumLoaded(disableMore ? restaurants.length : 5)\n  },[restaurants, disableMore]);\n  return (\n    <div ref={myRef}>\n      <div className='category-title'>{title}</div>\n      <div className=\"restaurant-list\">\n        {restaurants.slice(0, numLoaded).map(restaurant => (\n          <RestaurantCard restaurant={restaurant}/>\n        ))}\n        {numLoaded < restaurants.length &&\n        <button className=\"load-more\" onClick={() => changeNumLoaded(numLoaded + 6 > restaurants.length ? restaurants.length : numLoaded + 6)}>\n          + {restaurants.length - numLoaded} MORE\n        </button>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default RestaurantList;\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SideBar from \"./Components/SideBar\";\nimport RestaurantList from \"./Components/RestaurantList\";\n\nfunction App() {\n  const [restaurants, changeRestaurants] = useState([]);\n  const [allRestaurants, changeAllRestaurants] = useState([]);\n  const [exclusiveRestaurants, changeExclusiveRestaurants] = useState([]);\n  const [scrollPosn, changeScrollPosn] = useState(0);\n  const [selectedCategory, changeSelectedCategory] = useState('popular brands');\n\n  useEffect(() => {\n    window.onscroll = () => {\n      changeScrollPosn(window.pageYOffset + window.innerHeight)\n    }\n  }, []);\n  useEffect(() => {\n    const getData = async () => {\n      const response = await axios.get('http://cdn.adpushup.com/reactTask.json');\n      const data = response.data;\n      changeRestaurants(data);\n    };\n    getData();\n  }, []);\n\n  useEffect(() => {\n    const reducer = (accumulator, currentValue) =>  currentValue.restaurantList.concat(accumulator);\n    const allRestaurantsTemp = restaurants.reduce(reducer, []);\n    changeAllRestaurants([...allRestaurantsTemp]);\n    changeExclusiveRestaurants(allRestaurantsTemp.filter(restaurant => restaurant.isExlusive))\n  }, [restaurants]);\n\n  return (\n    <div className=\"App\">\n      <SideBar\n        items={[...restaurants.map(restaurantsCategory => restaurantsCategory.category), \"Only On Swiggy\", \"See All\"]}\n        numItems = {[...restaurants.map(restaurantsCategory => restaurantsCategory.restaurantList.length), exclusiveRestaurants.length, allRestaurants.length]}\n        selectedCategory={selectedCategory}\n      />\n      <div>\n        {restaurants.map((restaurantsCategory, key) => (\n          <div id={restaurantsCategory.category.replace(/ /g,'').toLowerCase()}>\n            <RestaurantList\n              title={restaurantsCategory.category}\n              restaurants={restaurantsCategory.restaurantList}\n              scrollPosn={scrollPosn}\n              changeSelectedCategory={changeSelectedCategory}\n            />\n          </div>\n        ))}\n\n        <div id={\"Only On Swiggy\".replace(/ /g,'').toLowerCase()}>\n          <RestaurantList\n            title=\"Only On Swiggy\"\n            restaurants={exclusiveRestaurants}\n            scrollPosn={scrollPosn}\n            changeSelectedCategory={changeSelectedCategory}\n          />\n        </div>\n        <div id={\"See All\".replace(/ /g,'').toLowerCase()}>\n          <RestaurantList\n            title=\"See All\"\n            restaurants={allRestaurants}\n            disableMore\n            scrollPosn={scrollPosn}\n            changeSelectedCategory={changeSelectedCategory}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}